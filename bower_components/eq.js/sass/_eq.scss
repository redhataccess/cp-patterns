//////////////////////////////
// Variables
//////////////////////////////
// Selectors that were called for CSS element queries
$EQ-Selectors: ();

//////////////////////////////
// Element Queries!
//
// $states - List of states to apply styling to; @include eq(small, medium, large)
//////////////////////////////
@mixin eq($states...) {
  @if (length($states) == 0) {
    @if feature-exists(at-error) {
      @error 'You need to include a state for the `eq` mixin';
    }
    @else {
      @warn 'You need to include a state for the `eq` mixin';
    }
  }
  @else {
    //////////////////////////////
    // Markup based Element Queries
    //////////////////////////////
    $extend: unique-id();
    @at-root {
      %#{$extend} {
        @content;
      }
    }
    @each $state in $states {
      &[data-eq-state="#{$state}"] {
        @extend %#{$extend};
      }
    }
  }
}

//////////////////////////////
// Element Query Points
//
// Prints element query points to element's `:before`
//
// $states - Map of `name: size`; @include eq-pts((small: 400, medium: 600, large: 900))
//////////////////////////////
@mixin eq-pts($states) {
  &:before {
    display: none;
    content: '#{str-slice(inspect($states), 2, -2)}';
  }

  @if not index($EQ-Selectors, &) {
    $EQ-Selectors: append($EQ-Selectors, &, 'comma') !global;
  }
}

//////////////////////////////
// Element Query Selectors
//
// Prints list of selectors that were called for CSS element queries to HTML's `:before`
//////////////////////////////
@mixin eq-selectors {
  @at-root {
    html:before {
      display: none;
      content: '#{$EQ-Selectors}';
    }
  }
}
